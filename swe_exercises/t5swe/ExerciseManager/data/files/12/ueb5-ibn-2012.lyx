#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
\usepackage[ngerman]{babel}
\usepackage{xspace}
\usepackage{caption}
\usepackage[autolanguage]{numprint}
\usepackage{booktabs}
\usepackage{tikz}
\usepackage{ifthen}
\usepackage{paralist}
\usepackage{scrpage2}
%\usepackage{libertine} 
\usepackage{listings}

\newcommand{\uebnr}{5}
\newcommand{\uebabgabe}{30.05.2012, 11:00 Uhr}

%\newcommand{\uebdatum}{25.04.2012}
 
\newcounter{uebnummer}
\setcounter{uebnummer}{0}

\newcommand{\aufgabe}[1]{\stepcounter{uebnummer}\section*{Aufgabe \arabic{uebnummer} \hfill(#1 \ifthenelse{\equal{#1}{1}}{Punkt}{Punkte})}}

\pagestyle{scrheadings}

\ifoot{\footnotesize{\uebnr{}. Übung IBN -- SoSe 2012}}
\cfoot{}
\ofoot{\thepage}

%\newcommand{\befehl}[1]{"`\texttt{#1}"'\xspace}
\setlength{\parindent}{0pt} 

\newcommand{\befehl}[1]{"`\texttt{#1}"'\xspace}
\end_preamble
\options headinclude,footinclude,DIV14,smallheadings
\use_default_options false
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Universität Heidelberg 
\begin_inset space \hfill{}
\end_inset

Lehrstuhl für Parallele und Verteilte Systeme (PVS)
\begin_inset Newline newline
\end_inset

 Sommersemester 2012 
\begin_inset space \hfill{}
\end_inset

Artur Andrzejak
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size large
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
uebnr{}
\end_layout

\end_inset

.
 Übung zur Vorlesung 
\begin_inset Quotes gld
\end_inset

Betriebssysteme und Netzwerke
\begin_inset Quotes grd
\end_inset

 (IBN)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\series default
\size default

\begin_inset VSpace 2ex*
\end_inset

Abgabedatum: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
uebabgabe
\end_layout

\end_inset


\series bold
\size large

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\series default
\size default

\begin_inset CommandInset line
LatexCommand rule
offset "0ex"
width "100col%"
height "0.5pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{3}
\end_layout

\end_inset

In der Vorlesung 11 wurde das Verhalten der Seitenersetzungsalgorithmen
 OPT, FIFO und LRU an den Referenzfolgen A oder B illustriert.
 Vervollständigen Sie die Graphiken (ggf.
 als Tabelle) in den Folien 6 (FIFO) und 7 (LRU) dieser Vorlesung, so dass
 man den Verlauf der Belegung der drei Seitenrahmen sieht.
 Erstellen Sie eine analoge Tabelle oder Graphik für den Second-Chance-Algorithm
us jeweils für die Referenzfolgen A und B.
 Kennzeichnen Sie in allen Fällen die Seitenzugriffe, bei denen ein Seitenfehler
 auftritt.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{1}
\end_layout

\end_inset

Geben Sie ein einfaches Beispiel einer Seitenzugriffsreihenfolge an, bei
 der die erste Seite, die als Opfer ausgewählt wird, für den Clock-Algorithmus
 und LRU unterschiedlich ist.
 Nehmen Sie an, dass einem Prozess drei Rahmen zugeteilt sind und dass die
 Seitenzugriffsreihenfolge Seitennummern aus der Menge 
\begin_inset Formula $\{0,\ldots,9\}$
\end_inset

 enthält.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{2+4}
\end_layout

\end_inset

Geben Sie Pseudocode für ein Programm an, das ein größtes Working Set (WS)
 in einer Referenzfolge von Seitenzugriffen berechnet, wobei die Definition
 eines WS aus der Folie 21 der Vorlesung 11 verwendet werden soll.
 In Detail: das Programm bekommt als Eingabe die Anzahl 
\begin_inset Formula $\Delta$
\end_inset

 der letzten zu berücksichtigenden Speicherzugriffe und den Dateinamen einer
 Datei mit einer Referenzfolge (z.B.
 pro Zeile: ein Index der zugegriffenen Seite).
 Es liest die Datei ein, verarbeitet diese, und gibt ein größtes WS (für
 
\begin_inset Formula $\Delta$
\end_inset

) aus.
 Geben Sie die relevanten Datenstrukturen und Variablen an.
 Bei den I/O-Operationen können Sie dagegen vereinfachen, z.B.
 reicht die Beschreibung 
\begin_inset Quotes gld
\end_inset

lese Inhalt der Datei
\emph on
 
\emph default
mit Dateinamen 
\emph on
name
\emph default
 in ein Array 
\emph on
pageAccesses
\emph default
 ein
\begin_inset Quotes grd
\end_inset

.
 
\series bold
Freiwillige Zusatzaufgabe
\series default
 (4 Punkte): Implementieren Sie ihren Algorithmus in einer Programmiersprache
 ihrer Wahl, und testen Sie die Implementierung an den Referenzfolgen A
 und B aus der Vorlesung 11 aus (mit 
\begin_inset Formula $\Delta=5$
\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{1}
\end_layout

\end_inset

Die Prozessoren mit der IA32-Architektur besitzen eine mehrstufige Adressüberset
zung.
 Beschreiben Sie den kompletten Prozesse der Adressübersetzung bei der Ausführun
g eines CPU-Befehls wie 
\emph on
call ds:lsWindow
\emph default
 und benennen Sie dabei alle Komponenten (u.a.
 Register und andere Speicherinhalte), die die endgültige Adresse beeinflussen
 können.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{5}
\end_layout

\end_inset

 Die Fibonacci-Folge ist eine Zahlenfolge, wobei sich ein Glied durch die
 Addition der beiden vorherigen Glieder ergibt.
 Die Fibonacci-Folge beginnt dabei mit den Werten 
\begin_inset Formula $f_{0}=0$
\end_inset

 und 
\begin_inset Formula $f_{1}=1$
\end_inset

.
 Das 
\begin_inset Formula $n$
\end_inset

-te Glied ist dann wie folgt definiert: 
\begin_inset Formula 
\[
f_{n}=f_{n-1}+f_{n-2}
\]

\end_inset

 für 
\begin_inset Formula $n\ge2,\,n\in\mathcal{N}$
\end_inset

.
\end_layout

\begin_layout Standard
Schreiben Sie ein x86-Assembler-Programm, welches das 
\begin_inset Formula $n$
\end_inset

-te Glied der Fibonacci-Folge berechnet und auf der Kommandozeile ausgibt.
 Verwenden Sie dazu bitte den frei erhältlichen NASM-Assembler
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.nasm.us/
\end_layout

\end_inset


\end_layout

\end_inset

.
 Sie können dazu annehmen, dass der Wert 
\begin_inset Formula $n$
\end_inset

 zu Beginn des Programms in Register 
\emph on
eax
\emph default
 gespeichert ist.
 Zur Ausgabe des 
\begin_inset Formula $n$
\end_inset

-ten Glieds können Sie die 
\emph on
printf
\emph default
-Funktion verwenden.
 Ein Code-Gerüst für diese Aufgabe für NASM und ein entsprechendes Makefile
 finden Sie in Moodle (Sie brauchen nur eine der 32-Bit oder 64-Bit Versionen
 zu implementieren).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{2}
\end_layout

\end_inset

Beschreiben Sie, wie man symbolische Links und Hardlinks unter Linux erstellt.
 Geben Sie zu beiden Möglichkeiten ein Beispiel an.
 Angenommen, man hat eine Datei 
\emph on
foo.txt
\emph default
 und erzeugt in Fall (a) einen symbolischen Link und in Fall (b) einen Hardlink
 auf 
\emph on
foo.txt
\emph default
.
 Was passiert in jedem Fall, wenn die originale Datei foo.txt gelöscht wird?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{1}
\end_layout

\end_inset

Ein I-Node eines fiktiven Betriebssystems hat fünfzehn direkte Adressen
 von 4 Byte Länge und eine Adresse auf einen einfach indirekten Block („single
 indirect“).
 Wenn alle Plattenblöcke 2048 Byte lang sind, wie groß ist dann die größtmöglich
e Datei?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
aufgabe{1}
\end_layout

\end_inset

Ein UNIX-Dateisystem hat 4-KB-Blöcke und 4-Byte-Plattenadressen.
 Was ist die maximale Dateigröße, falls die I-Nodes dreizehn direkte Adressen
 und Adressen auf jeweils einen einfach, doppelt und dreifach indirekten
 Block besitzen?
\end_layout

\end_body
\end_document
